<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance Tips on Heartysoft Solutions Limited</title>
    <link>http://hsft.co/tags/performance-tips/</link>
    <description>Recent content in Performance Tips on Heartysoft Solutions Limited</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 10 Jun 2013 11:57:03 +0000</lastBuildDate>
    
	<atom:link href="http://hsft.co/tags/performance-tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Martin Thompson’s Writing Concurrent Code with Lock Free Algorithms Course</title>
      <link>http://hsft.co/ashic/blog/2013/06/martin-thompson-lock-free-algos/</link>
      <pubDate>Mon, 10 Jun 2013 11:57:03 +0000</pubDate>
      
      <guid>http://hsft.co/ashic/blog/2013/06/martin-thompson-lock-free-algos/</guid>
      <description>I had the opportunity to attend Martin Thompson’s Writing Concurrent Code with Lock Free Algorithms Course ( http://skillsmatter.com/course/java-jee/martin-thompsons-writing-concurrent-code-with-lock-free-algorithms ) at SkillsMatter last week. Here is a brief summary of my experience.
The course starts off with Martin talking about mechanical sympathy, and describing how the innards of modern processors work from a conceptual point of view. This includes various level of caches, buffers, memory controllers, processor architecture, cache lines and what not.</description>
    </item>
    
    <item>
      <title>Specifying Processor Affinity on Windows (Taskset for Windows)</title>
      <link>http://hsft.co/ashic/blog/2013/06/processor-affinity-windows-taskset/</link>
      <pubDate>Thu, 06 Jun 2013 08:48:21 +0000</pubDate>
      
      <guid>http://hsft.co/ashic/blog/2013/06/processor-affinity-windows-taskset/</guid>
      <description>Applications that use multiple threads can benefit greatly in terms of performance by specifying the processors which should be available to it. By default, the OS scheduler can do an OK job of this, however if you know how you’re using threads, being able to specify which processors to run on can significantly increase performance. Let’s consider an example:
You have an application that has two threads sharing one or more variables.</description>
    </item>
    
    <item>
      <title>Hey Kaspersky, Stop Slowing Down My VS</title>
      <link>http://hsft.co/ashic/blog/2008/07/hey-kaspersky-stop-slowing-down-my-vs/</link>
      <pubDate>Mon, 14 Jul 2008 04:39:00 +0000</pubDate>
      
      <guid>http://hsft.co/ashic/blog/2008/07/hey-kaspersky-stop-slowing-down-my-vs/</guid>
      <description>I&#39;m finally starting off this blog about a month after Joe gave it to me...yay, awesome, yahoo (or should that be MS yahoo?).
One thing that has always frustrated me was that whenever I install Vista (or XP), everything is zippy and fast. Gradually, things become really sluggish. Then, it becomes so unbearable that I have to reinstall the darned thing. The thing that slowed down the most (or at least, is a frontline contender for slowing down) seemed to be VS - the one thing I needed the most (well, maybe after IE).</description>
    </item>
    
  </channel>
</rss>