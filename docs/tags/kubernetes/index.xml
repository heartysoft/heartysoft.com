<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Heartysoft Solutions Limited</title>
    <link>http://heartysoft.com/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on Heartysoft Solutions Limited</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 03 Jul 2017 23:32:30 +0000</lastBuildDate>
    
	<atom:link href="http://heartysoft.com/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Enabling K8s Features like PodPreset with Kops</title>
      <link>http://heartysoft.com/ashic/blog/2017/07/enabling-k8s-features-like-podpreset-with-kops/</link>
      <pubDate>Mon, 03 Jul 2017 23:32:30 +0000</pubDate>
      
      <guid>http://heartysoft.com/ashic/blog/2017/07/enabling-k8s-features-like-podpreset-with-kops/</guid>
      <description>Kubernetes PodPresets are an interesting features. It allows us to define some common things about containers, and reuse them across different things (like deployments). For example, in my current project, we have some Kubernetes secrets relating to FTP connections. We use Airflow for orchestration, and as part of the workflow, sensors running in the Airflow container detect if particular files on FTP have changed. If they have, then a step in the workflow is triggered that runs a different pod in the cluster.</description>
    </item>
    
    <item>
      <title>Public ELBs with Private Kubernetes</title>
      <link>http://heartysoft.com/ashic/blog/2017/05/public-elbs-with-private-kubernetes/</link>
      <pubDate>Mon, 22 May 2017 18:17:00 +0000</pubDate>
      
      <guid>http://heartysoft.com/ashic/blog/2017/05/public-elbs-with-private-kubernetes/</guid>
      <description>Kubernetes services allow us to address a collection of pods through a stable endpoint. Depending on the service type, this endpoint may be addressable only from within the cluster, from the same network, or even from the public internet. When running on AWS, setting the service type for a service to LoadBalancer will create an AWS ELB, which can be used as the endpoint. Wih a Kubernetes cluster running on public subnets, this just works.</description>
    </item>
    
    <item>
      <title>Upgrading Kubernetes with Kops to 1.6.2</title>
      <link>http://heartysoft.com/ashic/blog/2017/05/upgrading-k8s-with-kops-to-1.6.2-woes/</link>
      <pubDate>Sat, 20 May 2017 20:42:30 +0000</pubDate>
      
      <guid>http://heartysoft.com/ashic/blog/2017/05/upgrading-k8s-with-kops-to-1.6.2-woes/</guid>
      <description>Kops 1.6.0 was released this week, and I went ahead and ran kop update on one of my 1.5.2 clusters. After the rolling upgrade, it appeared to go well, but the master nodes didn&amp;rsquo;t seem to be ready. I tried various things, but the issues seemed to revolved around three components: kube-dns, weave-net, and dns-controller.
Fixing kube-dns was simple. I just created an empty ConfigMap named kube-dns in the kube-system namespace:</description>
    </item>
    
    <item>
      <title>Kubernetes and Weird Environment Variables</title>
      <link>http://heartysoft.com/ashic/blog/2017/05/kubernetes-and-weird-env-vars/</link>
      <pubDate>Wed, 10 May 2017 00:27:30 +0000</pubDate>
      
      <guid>http://heartysoft.com/ashic/blog/2017/05/kubernetes-and-weird-env-vars/</guid>
      <description>We&amp;rsquo;ve started using Kubernetes, and came across an obvious thing that wasn&amp;rsquo;t apparent until we realised what it was. We were setting up a Kafka Schema Registry, and a Spark cluster on Kubernetes. Things seemed to work, except we suddenly saw that they didn&amp;rsquo;t. Digging down, we saw that the Schema Registry was failing during initialisation stating that SCHEMA_REGISTRY_PORT is deprecated. We couldn&amp;rsquo;t figure out what was injecting the environment variable called SCHEMA_REGISTRY_PORT, and why it suddenly started getting injected, having worked fine before.</description>
    </item>
    
  </channel>
</rss>